//  #######################################################
//  #   _utils.scss
//		Single purpose utitlity classes
//  #######################################################

$pad-levels : 15;

//  #######################################################
//  #   Padding
//  #######################################################

@for $i from 0 through $pad-levels 
{
	.pad-#{$i}			{ padding: $size-pad * $i !important; }
	.pad-#{$i}-v		{ padding-top: $size-pad * $i !important; padding-bottom: $size-pad * $i !important; }
	.pad-#{$i}-h		{ padding-left: $size-pad * $i !important; padding-right: $size-pad * $i !important; }
	.pad-#{$i}-top		{ padding-top: $size-pad * $i !important; }
	.pad-#{$i}-bottom	{ padding-bottom: $size-pad * $i !important; }
	.pad-#{$i}-left		{ padding-left: $size-pad * $i !important; }
	.pad-#{$i}-right	{ padding-right: $size-pad * $i !important; }

	// Breakpoint specific
	@each $key, $value in $bp-classes
	{
	    @include breakpoint( $value )
	    {
	    	.pad-#{$i}-#{$key}			{ padding: $size-pad * $i !important; }
			.pad-#{$i}-v-#{$key}			{ padding-top: $size-pad * $i !important; padding-bottom: $size-pad * $i !important; }
			.pad-#{$i}-h-#{$key}			{ padding-left: $size-pad * $i !important; padding-right: $size-pad * $i !important; }
			.pad-#{$i}-top-#{$key}		{ padding-top: $size-pad * $i !important; }
			.pad-#{$i}-bottom-#{$key}	{ padding-bottom: $size-pad * $i !important; }
			.pad-#{$i}-left-#{$key}		{ padding-left: $size-pad * $i !important; }
			.pad-#{$i}-right-#{$key}		{ padding-right: $size-pad * $i !important; }
	    }
	}
}

// Half sizes
.pad-h					{ padding: $size-pad * 0.5 !important; }
.pad-h-v				{ padding-top: $size-pad * 0.5 !important; padding-bottom: $size-pad * 0.5 !important; }
.pad-h-h				{ padding-left: $size-pad * 0.5 !important; padding-right: $size-pad * 0.5 !important; }
.pad-h-top				{ padding-top: $size-pad * 0.5 !important; }
.pad-h-bottom			{ padding-bottom: $size-pad * 0.5 !important; }
.pad-h-left				{ padding-left: $size-pad * 0.5 !important; }
.pad-h-right			{ padding-right: $size-pad * 0.5 !important; }

// Breakpoint specific
@each $key, $value in $bp-classes
{
    @include breakpoint( $value )
    {
    	.pad-h-#{$key}					{ padding: $size-pad * 0.5 !important; }
		.pad-h-v-#{$key}				{ padding-top: $size-pad * 0.5 !important; padding-bottom: $size-pad * 0.5 !important; }
		.pad-h-h-#{$key}				{ padding-left: $size-pad * 0.5 !important; padding-right: $size-pad * 0.5 !important; }
		.pad-h-top-#{$key}				{ padding-top: $size-pad * 0.5 !important; }
		.pad-h-bottom-#{$key}			{ padding-bottom: $size-pad * 0.5 !important; }
		.pad-h-left-#{$key}				{ padding-left: $size-pad * 0.5 !important; }
		.pad-h-right-#{$key}			{ padding-right: $size-pad * 0.5 !important; }
    }
}


//  #######################################################
//  #   Margin
//  #######################################################

@for $i from 0 through $pad-levels 
{
	.margin-#{$i}			{ margin: $size-pad * $i !important; }
	.margin-#{$i}-v			{ margin-top: $size-pad * $i !important; margin-bottom: $size-pad * $i !important; }
	.margin-#{$i}-h			{ margin-left: $size-pad * $i !important; margin-right: $size-pad * $i !important; }
	.margin-#{$i}-top		{ margin-top: $size-pad * $i !important; }
	.margin-#{$i}-bottom	{ margin-bottom: $size-pad * $i !important; }
	.margin-#{$i}-left		{ margin-left: $size-pad * $i !important; }
	.margin-#{$i}-right		{ margin-right: $size-pad * $i !important; }

	// Breakpoint specific
	@each $key, $value in $bp-classes
	{
	    @include breakpoint( $value )
	    {
	    	.margin-#{$i}-#{$key}			{ margin: $size-pad * $i !important; }
			.margin-#{$i}-v-#{$key}			{ margin-top: $size-pad * $i !important; margin-bottom: $size-pad * $i !important; }
			.margin-#{$i}-h-#{$key}			{ margin-left: $size-pad * $i !important; margin-right: $size-pad * $i !important; }
			.margin-#{$i}-top-#{$key}		{ margin-top: $size-pad * $i !important; }
			.margin-#{$i}-bottom-#{$key}		{ margin-bottom: $size-pad * $i !important; }
			.margin-#{$i}-left-#{$key}		{ margin-left: $size-pad * $i !important; }
			.margin-#{$i}-right-#{$key}		{ margin-right: $size-pad * $i !important; }
	    }
	}
}

// Half sizes
.margin-h					{ margin: $size-pad * 0.5 !important; }
.margin-h-v					{ margin-top: $size-pad * 0.5 !important; margin-bottom: $size-pad * 0.5 !important; }
.margin-h-h					{ margin-left: $size-pad * 0.5 !important; margin-right: $size-pad * 0.5 !important; }
.margin-h-top				{ margin-top: $size-pad * 0.5 !important; }
.margin-h-bottom			{ margin-bottom: $size-pad * 0.5 !important; }
.margin-h-left				{ margin-left: $size-pad * 0.5 !important; }
.margin-h-right				{ margin-right: $size-pad * 0.5 !important; }


//  #######################################################
//  #   Display
//  #######################################################

.h-display-block		{ display: block !important; }
.h-display-inline-block	{ display: inline-block !important; }
.h-display-inline		{ display: inline !important; }

.h-pos-fixed			{ position: fixed !important; }

.hidden					{ display: none !important; }

//  #######################################################
//  #   Text
//  #######################################################

.h-font-heading { font-family: $font-family-heading; }
.h-font-serif  	{ font-family: $font-family-serif; }

.h-text-muted  	{ color: $color-text-muted; }

.h-text-small  	{ font-size: $font-size-small; }
.h-font-size-small { font-size: $font-size-small !important; }

.h-text-left 	{ text-align: left; }
.h-text-center 	{ text-align: center; }
.h-text-right 	{ text-align: right; }
.h-text-justify	{ text-align: justify; }

.h-font-weight-normal 	{ font-weight: $font-weight-normal !important; }
.h-font-weight-semi 	{ font-weight: $font-weight-semi !important; }
.h-font-weight-bold 	{ font-weight: $font-weight-bold !important; }
.h-text-bold 			{ font-weight: $font-weight-bold; }
.h-text-italic 			{ font-style: italic; }

.h-text-uppercase	{ text-transform: uppercase; }
.h-text-lowercase	{ text-transform: lowercase; }
.h-text-capitalize	{ text-transform: capitalize; }
.h-text-transform-reset { text-transform: initial !important; }

.h-color-primary 	{ color: $color-primary; }
.h-color-secondary 	{ color: $color-secondary; }
.h-color-headings	{ color: $color-headings; }
.h-color-text 		{ color: $color-text; }
.h-color-white 		{ color: white !important; }

.h-text-truncate
{
	// Note: width must be set on case by case basis
	
	display: inline-block;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

//  #######################################################
//  #   Images
//  #######################################################

.h-image-fit-container
{
	max-width: 100%;
}

//  #######################################################
//  #   Mixins
//  #######################################################

// Handles browser prefixes for transform
@mixin transform( $rule )
{
	transform: $rule;
	-webkit-transform: $rule;
	-moz-transform: $rule;
	-ms-transform: $rule;
}

// Prints all CSS rules from a map
@mixin print($map)
{
	@each $key, $value in $map
	{
		#{$key} : $value;
	}
}